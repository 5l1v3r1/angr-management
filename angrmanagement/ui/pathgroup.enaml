from enaml.core.api import Looper
from enaml.layout.api import hbox, vbox
from enaml.widgets.api import (
    Container, DockItem, ObjectCombo, PushButton, ScrollArea
)

from .listcontrol import QtListControl

enamldef PathGroup(Container):
    attr pg
    attr selected_path = None
    func refresh():
        path_sel.items = pg.active
        path_sel.refresh_items()

    constraints = [
        # vbox(hbox(scroller)),
    ]

    QtListControl: path_sel:
        items << pg.active if pg else []
        to_string = repr

        on_selected ::
            selected_path = path_sel.selected_item

    # ScrollArea: scroller:
    #     Container:
    #         Looper: looper:
    #             iterable << pg.active if pg else []
    #             PushButton:
    #                 text = repr(loop_item)
    #                 clicked :: path_selected(loop_item)

def noop_notify(o, attr):
    change = {
        'value': getattr(o, attr),
        'object': o,
        'type': 'update',
        'name': attr,
        'oldvalue': None
    }
    o.notify(attr, change)
    o.get_member(attr).notify(o, change)

enamldef PathGroupItem(DockItem): pgi:
    attr path_groups
    attr selected_path = None
    attr selected_pg = None

    title = "Path Group"

    Container:
        constraints = [
            vbox(hbox(pg_sel, new_pg), hbox(step_pg, step_pg_until), paths),
        ]

        ObjectCombo: pg_sel:
            items << path_groups.groups
            to_string = repr
            selected := selected_pg

        PushButton: new_pg:
            text = 'New PG'
            clicked :: path_groups.add_path_group()

        PushButton: step_pg:
            text = 'Step PG'
            enabled << pg_sel.selected is not None
            clicked ::
                pg_sel.selected.step()
                paths.refresh()
                # __import__('ipdb').set_trace()
                # pgi.selected_pg = pg_sel.selected
                noop_notify(pgi, 'selected_pg')

        PushButton: step_pg_until:
            text = 'Step PG Until Branch'
            enabled << pg_sel.selected is not None
            clicked ::
                orig_len = len(pg_sel.selected.active)
                while len(pg_sel.selected.active) == orig_len:
                    pg_sel.selected.step()
                    # paths.refresh()
                    # pg_changed(pg_sel.selected)
                paths.refresh()
                # pgi.selected_pg = pg_sel.selected
                noop_notify(pgi, 'selected_pg')

        PathGroup: paths:
            pg << pg_sel.selected
            selected_path := selected_path
